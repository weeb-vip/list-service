// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type APIInfo struct {
	// API Info of the ListServiceAPI
	GolangTemplateAPI *ListServiceAPI `json:"golangTemplateAPI"`
	// Name of the API
	Name string `json:"name"`
}

func (APIInfo) IsEntity() {}

type ListServiceAPI struct {
	// Version of event golang-template service
	Version string `json:"version"`
}

type UserAnime struct {
	ID                 string   `json:"id"`
	UserID             string   `json:"userID"`
	AnimeID            string   `json:"animeID"`
	Status             *Status  `json:"status,omitempty"`
	Score              *float64 `json:"score,omitempty"`
	Episodes           *int     `json:"episodes,omitempty"`
	Rewatching         *int     `json:"rewatching,omitempty"`
	RewatchingEpisodes *int     `json:"rewatchingEpisodes,omitempty"`
	Tags               []string `json:"tags,omitempty"`
	ListID             *string  `json:"listID,omitempty"`
	CreatedAt          *string  `json:"createdAt,omitempty"`
	UpdatedAt          *string  `json:"updatedAt,omitempty"`
	DeletedAt          *string  `json:"deletedAt,omitempty"`
}

func (UserAnime) IsEntity() {}

type UserAnimeInput struct {
	ID                 *string  `json:"id,omitempty"`
	AnimeID            string   `json:"animeID"`
	Status             *Status  `json:"status,omitempty"`
	Score              *float64 `json:"score,omitempty"`
	Episodes           *int     `json:"episodes,omitempty"`
	Rewatching         *int     `json:"rewatching,omitempty"`
	RewatchingEpisodes *int     `json:"rewatchingEpisodes,omitempty"`
	Tags               []string `json:"tags,omitempty"`
	ListID             *string  `json:"listID,omitempty"`
}

type UserAnimePaginated struct {
	Page   int          `json:"page"`
	Limit  int          `json:"limit"`
	Total  string       `json:"total"`
	Animes []*UserAnime `json:"animes"`
}

type UserAnimesInput struct {
	Status *Status `json:"status,omitempty"`
	Page   int     `json:"page"`
	Limit  int     `json:"limit"`
}

type UserList struct {
	ID          string   `json:"id"`
	UserID      string   `json:"userID"`
	Name        string   `json:"name"`
	Description *string  `json:"description,omitempty"`
	Type        *string  `json:"type,omitempty"`
	Tags        []string `json:"tags,omitempty"`
	IsPublic    *bool    `json:"isPublic,omitempty"`
	CreatedAt   *string  `json:"createdAt,omitempty"`
	UpdatedAt   *string  `json:"updatedAt,omitempty"`
	DeletedAt   *string  `json:"deletedAt,omitempty"`
}

func (UserList) IsEntity() {}

type UserListInput struct {
	ID          *string  `json:"id,omitempty"`
	Name        string   `json:"name"`
	Description *string  `json:"description,omitempty"`
	Type        *string  `json:"type,omitempty"`
	Tags        []string `json:"tags,omitempty"`
	IsPublic    *bool    `json:"isPublic,omitempty"`
}

type Status string

const (
	StatusWatching    Status = "WATCHING"
	StatusCompleted   Status = "COMPLETED"
	StatusOnhold      Status = "ONHOLD"
	StatusDropped     Status = "DROPPED"
	StatusPlantowatch Status = "PLANTOWATCH"
)

var AllStatus = []Status{
	StatusWatching,
	StatusCompleted,
	StatusOnhold,
	StatusDropped,
	StatusPlantowatch,
}

func (e Status) IsValid() bool {
	switch e {
	case StatusWatching, StatusCompleted, StatusOnhold, StatusDropped, StatusPlantowatch:
		return true
	}
	return false
}

func (e Status) String() string {
	return string(e)
}

func (e *Status) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Status(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}

func (e Status) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
