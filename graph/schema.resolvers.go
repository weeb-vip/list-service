package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"

	"github.com/weeb-vip/list-service/graph/generated"
	"github.com/weeb-vip/list-service/graph/model"
	"github.com/weeb-vip/list-service/internal/resolvers"
)

// GolangTemplateAPI is the resolver for the GolangTemplateAPI field.
func (r *apiInfoResolver) GolangTemplateAPI(ctx context.Context, obj *model.APIInfo) (*model.ListServiceAPI, error) {
	panic(fmt.Errorf("not implemented: GolangTemplateAPI - GolangTemplateAPI"))
}

// CreateList is the resolver for the CreateList field.
func (r *mutationResolver) CreateList(ctx context.Context, input model.UserListInput) (*model.UserList, error) {
	return resolvers.UpsertUserList(ctx, r.UserListService, input)
}

// DeleteList is the resolver for the DeleteList field.
func (r *mutationResolver) DeleteList(ctx context.Context, id string) (bool, error) {
	err := resolvers.DeleteUserList(ctx, r.UserListService, id)
	if err != nil {
		return false, err
	}
	return true, nil
}

// AddAnime is the resolver for the AddAnime field.
func (r *mutationResolver) AddAnime(ctx context.Context, input model.UserAnimeInput) (*model.UserAnime, error) {
	return resolvers.UpsertUserAnime(ctx, r.UserAnimeService, input)
}

// UpdateAnime is the resolver for the UpdateAnime field.
func (r *mutationResolver) UpdateAnime(ctx context.Context, input model.UserAnimeInput) (*model.UserAnime, error) {
	return resolvers.UpsertUserAnime(ctx, r.UserAnimeService, input)
}

// DeleteAnime is the resolver for the DeleteAnime field.
func (r *mutationResolver) DeleteAnime(ctx context.Context, id string) (bool, error) {
	err := resolvers.DeleteUserAnime(ctx, r.UserAnimeService, id)
	if err != nil {
		return false, err
	}
	return true, nil
}

// UserLists is the resolver for the UserLists field.
func (r *queryResolver) UserLists(ctx context.Context) ([]*model.UserList, error) {
	return resolvers.GetUserListsByID(ctx, r.UserListService)
}

// UserAnimes is the resolver for the UserAnimes field.
func (r *queryResolver) UserAnimes(ctx context.Context, input model.UserAnimesInput) (*model.UserAnimePaginated, error) {
	return resolvers.GetUserAnimeByID(ctx, r.UserAnimeService, input)
}

// ApiInfo returns generated.ApiInfoResolver implementation.
func (r *Resolver) ApiInfo() generated.ApiInfoResolver { return &apiInfoResolver{r} }

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type apiInfoResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
